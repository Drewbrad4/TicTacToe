{"version":3,"sources":["components/Square.js","components/Restart.js","App.js","serviceWorker.js","index.js"],"names":["Square","_this","this","index","props","react_default","a","createElement","Fragment","id","onClick","handleChange","box","Component","Restart","restartButton","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","marker","winChecker","_this$state","state","squareArray","xIsNext","historyO","historyX","push","console","log","setState","_this$state2","winner","map","value","_value","slicedToArray","b","c","includes","winMessage","window","location","reload","toConsumableArray","Array","fill","_this2","_this$state3","squares","components_Square","key","components_Restart","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.054bc43a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Square extends Component{\n  render(){\n    let { index } = this.props\n    return(\n      <React.Fragment>\n        <div id=\"square\" onClick = { () => {this.props.handleChange(index)} }> \n        {this.props.box}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default Square\n","import React, { Component } from 'react'\n\nclass Restart extends Component{\n  render(){\n    return(\n      <div id = \"restart\">\n      <button onClick= {this.props.restartButton}>Restart Game</button>\n      </div>\n    )\n  }\n}\nexport default Restart\n","import React, { Component } from 'react'\nimport Square from './components/Square'\nimport Restart from './components/Restart'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      squareArray: [...Array(9).fill(\" \")],\n      xIsNext: true,\n      historyO: [],\n      historyX: [],\n      winner: null,\n      winMessage: null\n    }\n  }\n\n  handleChange = (index) => {\n    this.marker(index)\n    this.winChecker(index)\n  }\n\n  marker = (index) =>{\n    let { squareArray, xIsNext, historyO, historyX} = this.state\n    if (squareArray[index] === \" \"){\n      if (xIsNext === true) {\n        squareArray[index] = \"X\"\n        xIsNext = false\n        historyX.push(index)\n        console.log(\"This is X history\", historyX);\n      } else {\n        squareArray[index] = \"O\"\n        xIsNext = true\n        historyO.push(index)\n        console.log(\"This is O history\", historyO);\n      }\n    }\n    this.setState({ squareArray: squareArray})\n    this.setState({ xIsNext: xIsNext})\n  }\n\n  winChecker = (index) =>{\n    let { historyX, historyO, winner, squareArray } = this.state\n    const winArrays = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n    ]\n    let winningArray = winArrays.map(value => {\n      //iterate through and check if either history includes the array\n      const [a, b, c] = value\n      if(historyX.includes(a) && historyX.includes(b) && historyX.includes(c)){\n        let winner = \"X\"\n        let winMessage = \"X's Win\"\n        this.setState({ winner: winner})\n        this.setState({ winMessage: winMessage})\n      } else if(historyO.includes(a) && historyO.includes(b) && historyO.includes(c)){\n        let winner = \"O\"\n        let winMessage = \"O's Win\"\n        this.setState({ winner: winner})\n        this.setState({ winMessage: winMessage})\n      } else if( winner === null && !squareArray.includes(\" \")){\n        let winMessage = \"There's a draw\"\n        this.setState({ winMessage: winMessage})\n      }\n    })\n  }\n\n  // Restart page functionality\n  restartButton = () =>{\n    window.location.reload()\n  }\n\n  render(){\n    let { squareArray, winMessage } = this.state\n    let squares = squareArray.map((box, index) =>{\n      return(\n        <Square\n          box = { box }\n          index = { index }\n          key = { index }\n          handleChange = { this.handleChange }\n        />\n      )\n    })\n    return(\n      <React.Fragment>\n        <h1>Tic Tac Toe</h1>\n        <div id= \"winMessage\"> { winMessage} </div>\n        <div id=\"gameboard\"> { squares }</div>\n        <Restart\n        restartButton = {this.restartButton}\n        />\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}